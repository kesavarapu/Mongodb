MongoDB Exercise in mongo shell
1.Connect to a running mongo instance, use a database named mongo_practice.Document all your queries in a javascript file to use as a reference.
use mongo_practice

2.Insert the following documents into a movies collection.
db.createCollection('movies')
db.movies.insert([
{
title: "Fight Club",
writer : "Chuck Palahniuko",
year : "1999",
actors : [
 "Brad Pitt","Edward Norton"],
},
{
title : "Pulp Fiction",
writer : "Quentin Tarantino",
year : "1994",
actors : ["John Travolta","Uma Thurman"],
},
{
title : "Inglorious Basterds",
writer : "Quentin Tarantino",
year : "2009",
actors : ["Brad Pitt","Diane Kruger","Eli Roth"],
},
{
title : "The Hobbit: An Unexpected Journey",
writer : "J.R.R. Tolkein",
year : "2012",
franchise : "The Hobbit",
},
{
title : "The Hobbit: The Desolation of Smaug",
writer : "J.R.R. Tolkein",
year : "2013",
franchise : "The Hobbit",
},
{
title : "The Hobbit: The Battle of the Five Armies",
writer : "J.R.R. Tolkein",
year : "2012",
franchise : "The Hobbit",
synopsis : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.",
},
{
title : "Pee Wee Herman's Big Adventure",
},
{
title : "Avatar",
}
])

3.Query / Find Documents
 1) get all documents
    db.movies.find()
 2)get all documents with writer set to "Quentin Tarantino"
   db.movies.find({writer: "Quentin Tarantino"})
 3)get all documents where actors include "Brad Pitt"
   db.movies.find({actors: "Brad Pitt"})
 4)get all documents with franchise set to "The Hobbit"
   db.movies.find({franchise: "The Hobbit"})
 5)get all movies released in the 90s
   db.movies.find( { year: { $lt: 2000 } } )
 6)get all movies released before the year 2000 or after 2010
   db.movies.find( { year:{$gt:2010,$lt:2000}})

4.Update Documents
 1) db.movies.update({title :"The Hobbit: An Unexpected Journey"},{$set: {synopsis:"A reluctant hobbit,Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to 
    reclaim their mountain home - and the gold within it - from the dragon Smaug."}})
 2) db.movies.update({title :"The Hobbit: The Desolation of Smaug"},{$set: {synopsis:"The dwarves,along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their 
    homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring".}})
 3) db.movies.updateOne({title:"pulp fiction"},{ $push: { actor:"Samuel L. Jackson"}}

5.Text search
 1) find all movies that have a synopsis that contains the word "Bilbo"
    db.movies.find(synopsis: {$regex:"Bilbo"}).pretty()
 2) find all movies that have a synopsis that contains the word "Gandalf"
    db.movies.find(synopsis:{$regex:"Gandalf"}).pretty()
 3) find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"
    db.movies.find({$and:[{synopsis:{$regex:"Bilbo"}},{synopsis:{$not:/Gandalf/}}]})
 4) find all movies that have a synopsis that contains the word "dwarves" or "hobbit"
    db.movies.find({$or:[{synopsis:{$regex:"dwarves"}},{synopsis:{$regex:"hobbit"}}]})
 5) find all movies that have a synopsis that contains the word "gold" and "dragon"
    db.movies.find({$and:[{synopsis:{$regex:"gold"}},{synopsis:{$regex:"dragon"}}]})

6.Delete documents
 1)delete the movie "Pee Wee Herman's Big Adventure"
   db.movies.delete({_id: "5fff09f9f0a42c1a185b000c"},{title: "Pee Wee Herman's Big Adventure"})
 2)delete the movie "Avatar"
   db.movies.remove({title:"Avatar"})

7.Querying related collections
 1)find all users
   db.users.find().pretty()
 2)find all posts
   db.posts.find().pretty()
 3)find all posts that was authored by "GoodGuyGreg"
   db.posts.find({username:"GoodGuyGerg"}).pretty()
 4)find all posts that was authored by "ScumbagSteve"
   db.posts.find({username:”GoodGuyGerg”}).pretty()
 5)find all comments
   db.comments.find().pretty()
 6)find all comments that was authored by "GoodGuyGreg"
   db.comments.find(username:"GoodGuyGerg")
 7)find all comments that was authored by "ScumbagSteve"
   db.comments.find({username:"ScumbagSteve"})



